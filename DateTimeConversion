# This script converts date-time values in an Excel file to 'Month Year' format.
# It reads data from a specified column, processes the date format,
# and saves the updated data in a new Excel file.
# I had 56,421 rows that had a format of "03/19/24 12:49pm" and excel kept crashing with the formulas to change the format. 
Python = Openpyxl easily resolved this solution for me. 
These dates are from a 3rd party data scraping provider with each data export.

********************************************************************************************

from openpyxl import load_workbook
from datetime import datetime

# Define month mapping
date_mapping = {
    "01": "January", "02": "February", "03": "March", "04": "April",
    "05": "May", "06": "June", "07": "July", "08": "August",
    "09": "September", "10": "October", "11": "November", "12": "December"
}

def convert_date_format(date_str):
    try:
        dt = datetime.strptime(date_str, "%m/%d/%y %I:%M%p")  # Convert to datetime object
        month_year = f"{date_mapping[dt.strftime('%m')]} {dt.strftime('%Y')}"
        return month_year
    except ValueError:
        return "Invalid Date"

# Load workbook
file_path = r"C:\Users\Username\Downloads\Book2.xlsx"
wb = load_workbook(file_path)
sheet = wb.active  # You can modify this to target a specific sheet by name

# Loop through Column A, write result to Column B
for row in range(2, sheet.max_row + 1):
    original_value = sheet.cell(row=row, column=1).value
    if original_value and isinstance(original_value, str):
        converted_value = convert_date_format(original_value)
        sheet.cell(row=row, column=2).value = converted_value  # Write to Column B

# Save to new file
wb.save(r"C:\Users\Username\Downloads\Book2.6.xlsx")
print("Conversion complete! Output saved as 'Book2.6.xlsx'.")
